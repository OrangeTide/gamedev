From dcf4bb5b199294c5f0a6b32eb942c9dbc4859c17 Mon Sep 17 00:00:00 2001
From: Jon Mayo <jon@rm-f.net>
Date: Wed, 21 Sep 2022 07:35:39 -0700
Subject: [PATCH] load XInput library in gamepad API

---
 sokol_gamepad.h | 42 +++++++++++++++++++++++++++++++++++----
 1 file changed, 38 insertions(+), 4 deletions(-)

diff --git a/sokol_gamepad.h b/sokol_gamepad.h
index 53d2d4c..2d02763 100644
--- a/sokol_gamepad.h
+++ b/sokol_gamepad.h
@@ -244,13 +244,47 @@ _SOKOL_PRIVATE sgamepad _sgamepad;
 /*== Windows Implementation ============================================*/
 #if defined (_WIN32)
 
+_SOKOL_PRIVATE HMODULE _sgamepad_g_hXInputDLL = NULL;
+_SOKOL_PRIVATE DWORD (__stdcall *_sgamepad_g_fXInputGetCapabilities)(DWORD, DWORD, XINPUT_CAPABILITIES*) = NULL;
+_SOKOL_PRIVATE DWORD (__stdcall *_sgamepad_g_fXInputGetState)(DWORD, XINPUT_STATE*)                      = NULL;
+
+
+_SOKOL_PRIVATE void _sgamepad_init() {
+    const wchar_t* dll_name[] = {
+        L"xinput1_4.dll",   // Windows 8+
+        L"xinput1_3.dll",   // DirectX SDK, Windows XP...
+        L"xinput9_1_0.dll", // Windows Vista, 7...
+    };
+    for (int i = 0; i < sizeof(dll_name) / sizeof(*dll_name); i++) {
+        HMODULE dll = LoadLibraryW(dll_name[i]);
+        if (dll) {
+            _sgamepad_g_hXInputDLL = dll;
+            _sgamepad_g_fXInputGetCapabilities = (DWORD (__stdcall *)(DWORD, DWORD, XINPUT_CAPABILITIES*))GetProcAddress(dll, "XInputGetCapabilities");
+            _sgamepad_g_fXInputGetState = (DWORD (__stdcall *)(DWORD, XINPUT_STATE*))GetProcAddress(dll, "XInputGetState");
+            break;
+        }
+    }
+}
+
+_SOKOL_PRIVATE void _sgamepad_shutdown() {
+    if (_sgamepad_g_hXInputDLL) {
+        _sgamepad_g_fXInputGetCapabilities = NULL;
+        _sgamepad_g_fXInputGetState = NULL;
+        FreeLibrary(_sgamepad_g_hXInputDLL);
+        _sgamepad_g_hXInputDLL = NULL;
+    }
+}
+
 _SOKOL_PRIVATE void _sgamepad_record_state() {
+    if (!_sgamepad_g_hXInputDLL) {
+        return;
+    }
     for (int i = 0; i < SGAMEPAD_MAX_SUPPORTED_GAMEPADS; i++)
     {
         sgamepad_gamepad_state* target = _sgamepad.gamepad_states + i;
       
         XINPUT_STATE xinput_state;
-        if (XInputGetState(i, &xinput_state) != ERROR_SUCCESS)
+        if (_sgamepad_g_fXInputGetState(i, &xinput_state) != ERROR_SUCCESS)
         {
             continue;
         }
@@ -548,7 +582,7 @@ _SOKOL_PRIVATE bool _sgamepad_android_input_handler(const AInputEvent* event) {
     }
 }
 
-_SOKOL_PRIVATE void _sgamepad_android_init() {
+_SOKOL_PRIVATE void _sgamepad_init() {
     _sapp.android.gamepad_event_handler = _sgamepad_android_input_handler;
 }
 
@@ -572,8 +606,8 @@ SOKOL_API_IMPL unsigned int sgamepad_get_max_supported_gamepads() {
 }
 
 SOKOL_API_IMPL void sgamepad_init() {
-#if defined(__ANDROID__)
-    _sgamepad_android_init();
+#if defined(__ANDROID__) || defined(_WIN32)
+    _sgamepad_init();
 #endif
 }
 
-- 
2.37.3

